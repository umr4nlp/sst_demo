(ROOT
    # :DCT s1d/2007-08-21 # explicit document creation time # is this really the dct? It may not be..
    : DCT dct
    :AUTOR aut
    :SNT(snt1
    2007-08-21
        :coref()
        :temporal()
        :modality()
    )
    :SNT(snt2
    Iran (Islamic Republic of) (IR)
        :coref()
        :temporal()
        :modality()
    )
    :SNT(snt3
    International; weapons; politics; proliferation; energy
        :coref()
        :temporal()
        :modality()
    )
    :SNT(snt4
        :coref(
            same(s4c/Iran, s2c/Iran)
        )
        :temporal(
            before(s4r3/reached, dct),
            overlap(s4a/agreement, s4r3/reached), # mwe
            overlap(s4s/stated, s4a/agreement), ## `reached agreement that stated` hard to establish temporal links here
            before(s4i/issues, s4s/stated),
            before(s4a3/ambiguities, s4s/stated)
        )
        :modality(
            pos(s4r3/reached, aut),
            pos(s4a/agreement, aut),
            pos(s4s/stated, aut),
            pos(s4o/IAEA, aut),
            pos(s4p2/Iranian_officials, aut),
            neg(s4o/IAEA, s4i/issues),
            neg(s4p2/Iranian_officials, s4i/issues),
            neg(s4o/IAEA, s4a3/ambiguities),
            neg(s4p2/Iranian_officials, s4a3/ambiguities),
        )
    )
    :SNT(snt5
        :coref(
            same(s5c4/Iran, s4c/Iran)
        )
        :temporal(
            overlap(s5s/suspect, dct),
            overlap(s5m/masks, s5s/suspect),
            # no dependency between `masks` and `obtain` in `masks an effort to obtain`
            # no links to hypothetical events
        )
        :modality(
            ## if modal_source is `A and B`, should we assign `A` and `B` separate nodes or a single one of `A && B`? The former for now
            pos(s5s/suspect, aut),
            pos(s5p3/us_officials, aut),
            pos(s5p5/european_officials, aut),
            pos(s5m/masks, s5p3/us_officials),
            pos(s5m/masks, s5p5/european_officials),
            posPrt(s5o2/obtain, s5p3/us_officials),
            posPrt(s5o2/obtain, s5p5/european_officials),
            neut(s5u2/used, s5p3/us_officials),
            neut(s5u2/used, s5p5/european_officials),
            neut(s5p2/production, s5p3/us_officials),
            neut(s5p2/production, s5p5/european_officials)
        )
    )
    :SNT(snt6
        ### !! snt5 and snt6 are the same, not sure why duplicates exist
    )
    :SNT(snt7
        :coref(
            same(s7p3/us_officials, s5p3/us_officials),
            same(s7p4/european_officials, s5p5/european_officials),
            same(s7c5/Iran, s4c/Iran) # no link to Tehran
            # no link to `Iran's nuclear programs` which shows up repeatedly
        )
        :temporal(
            # all hypothetical statements
            # except `UN considers ..`
            after(s7c4/considers, dct)
            # is `issue of Iran's nuclear energy program` an event?
        )
        :modality(
            neut(s7i/may_impose, aut),
            neut(s7s/sanction, aut),
            pos(s7c4/considers, aut),
            # is `issue of Iran's nuclear energy program` an event?
        )
    )
    :SNT(snt8
        # coref error in the amr: s8o and s8o2 both refer to the same entity, and should have been captured by a single variable. Our annotation nevertheless builds on the original amr with the error, which may actually fix the error through the subsequent tree super-structure
        :coref(
            same(s8o/The_International_Atomic_Energy_Agency, s4o/The_International_Atomic_Energy_Agency),
            same(s8o2/IAEA, s4o/The_International_Atomic_Energy_Agency)
        )
        :temporal(
            # before(s8d/distributed, s8m/meeting) # captured within amr
            before(s8d/distributed, dct)
        )
        :modality(
            pos(s8d/distributed, aut),
            pos(s8m/meeting, aut)
        )
    )
    :SNT(snt9
    ## ?????
        :coref(
            same(s9c2/Iran, s7c5/Iran)
            # no link to `Iranian officials` ?
        )
        :temporal(
            overlap(s9r/reflect, )
            before(s9b/began,
        )
        :modality()
    )
)
